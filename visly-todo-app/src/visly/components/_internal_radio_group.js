// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { createContext, useContext, useRef } from "react";
import {
  useEventHandlers,
  combineRef,
  useRootProps,
  exists,
  InteractionState,
  getStyleFunc,
} from "./_internal_utils";
import { useSpacing } from "./_internal_component_utils";
const RadioGroupContext = createContext(null);
export function RadioGroupRoot(props) {
  const ref = useRef();
  const { state, handlers } = useEventHandlers({
    ref,
    ...props,
  });
  const {
    style,
    injectedProps,
    className,
    tabIndex,
    testId,
    innerRef,
    role,
    values,
  } = useRootProps(props, state);
  const noSelectStyles = {
    userSelect: "none",
    WebkitUserSelect: "none",
    KhtmlUserSelect: "none",
    MozUserSelect: "none",
  };
  const children = useSpacing(
    props.addSpacing,
    props.children(getStyleFunc(values))
  );
  return (
    <div
      tabIndex={tabIndex}
      ref={combineRef(innerRef, ref)}
      role={role}
      data-testid={testId}
      {...handlers}
      {...(exists(injectedProps.reactProps) ? injectedProps.reactProps : {})}
      className={className}
      style={{ ...noSelectStyles, ...style }}
    >
      <RadioGroupContext.Provider
        value={{
          selected: props.selected,
          onSelect: props.onSelect,
          disabled: state === InteractionState.Disabled,
        }}
      >
        {children}
      </RadioGroupContext.Provider>
    </div>
  );
}
export function RadioGroupButtonRoot(props) {
  const ref = useRef();
  const { selected, onSelect, disabled } = useContext(RadioGroupContext);
  const { state, handlers } = useEventHandlers({
    ref,
    ...props,
    disabled: disabled || props.disabled,
    onClick: () => onSelect(props.value),
  });
  const {
    style,
    injectedProps,
    className,
    tabIndex,
    testId,
    innerRef,
    role,
    values,
  } = useRootProps({ ...props, selected: selected === props.value }, state);
  const noSelectStyles = {
    cursor: "pointer",
    userSelect: "none",
    WebkitUserSelect: "none",
    KhtmlUserSelect: "none",
    MozUserSelect: "none",
  };
  return (
    <div
      tabIndex={tabIndex}
      ref={combineRef(innerRef, ref)}
      role={role}
      data-testid={testId}
      {...handlers}
      {...(exists(injectedProps.reactProps) ? injectedProps.reactProps : {})}
      className={className}
      style={{ ...noSelectStyles, ...style }}
    >
      {props.children(getStyleFunc(values))}
    </div>
  );
}
