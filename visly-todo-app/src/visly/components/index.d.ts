// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import { CSSProperties } from "react";
export const ProgressBar: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    value?: number;
    color?: "red" | "yellow" | "green";
  }): JSX.Element;
};
export const Tooltip: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    text?: string;
    children?: React.ReactNode | React.ReactNodeArray;
    gravity?: left | top | right | bottom;
    delayMs?: number;
  }): JSX.Element;
};
export const Input: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    placeholder?: string;
    value?: string;
    onClick?: (event: MouseEvent) => any;
    onChange?: (value: string) => void;
    onFocus?: () => void;
    onBlur?: () => void;
    inputRef?: React.Ref<HTMLInputElement>;
  }): JSX.Element;
};
export const Button: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    text?: string;
    onClick?: () => void;
  }): JSX.Element;
};
export const Checkbox: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    onChange?: (checked: boolean) => void;
    checked?: boolean;
  }): JSX.Element;
};
export const IconButton: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    icon?: string;
    onClick?: () => void;
  }): JSX.Element;
};
export const Task: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    title?: string;
    date?: string;
    onClick?: (event: MouseEvent) => any;
    done?: boolean;
    onCheckedChanged?: (checked: boolean) => void;
    checked?: boolean;
  }): JSX.Element;
};
export const SubmitInput: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    onClick?: (event: MouseEvent) => any;
    onSubmit?: () => void;
    placeholder?: string;
    value?: string;
    onChange?: (value: string) => void;
  }): JSX.Element;
};
export const Page: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    children?: React.ReactNode | React.ReactNode[];
    onClick?: (event: MouseEvent) => any;
  }): JSX.Element;
};
export const SegmentedControl: {
  (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    children?: React.ReactNode | React.ReactNode[];
    selected?: string;
    onSelect: (value: string) => void;
  }): JSX.Element;
  Button: (props: {
    className?: string;
    style?: CSSProperties;
    tabIndex?: number;
    innerRef?: React.Ref<HTMLDivElement>;
    role?: string;
    testId?: string;
    onKeyUp?: (event: React.KeyboardEvent<any>) => void;
    onKeyDown?: (event: React.KeyboardEvent<any>) => void;
    disabled?: boolean;
    text?: string;
    value?: string;
    selected?: boolean;
  }) => JSX.Element;
};
