// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { useRef } from "react";
import {
  InteractionState,
  exists,
  useRootProps,
  useEventHandlers,
  combineRef,
} from "./_internal_utils";
import { useSpacing } from "./_internal_component_utils";
export function StaticRootPrimitive(props) {
  const { injectedProps, className, tabIndex, innerRef, values } = useRootProps(
    props,
    InteractionState.None
  );
  const children = useSpacing(props.addSpacing, props.children(values));
  return (
    <div
      ref={innerRef}
      className={className}
      tabIndex={tabIndex}
      {...injectedProps}
    >
      {children}
    </div>
  );
}
export function RootPrimitive(props) {
  const ref = useRef();
  const { state, handlers } = useEventHandlers({
    ref,
    ...props,
  });
  const {
    style,
    injectedProps,
    className,
    tabIndex,
    testId,
    innerRef,
    role,
    values,
  } = useRootProps(props, state);
  const noSelectStyles = exists(props.onClick)
    ? {
        cursor: "pointer",
        userSelect: "none",
        WebkitUserSelect: "none",
        KhtmlUserSelect: "none",
        MozUserSelect: "none",
      }
    : {};
  const children = useSpacing(props.addSpacing, props.children(values));
  return (
    <div
      tabIndex={tabIndex}
      ref={combineRef(innerRef, ref)}
      role={role}
      data-testid={testId}
      {...handlers}
      {...(exists(injectedProps.reactProps) ? injectedProps.reactProps : {})}
      className={className}
      style={{ ...noSelectStyles, ...style }}
    >
      {children}
    </div>
  );
}
export function ContainerPrimitive(props) {
  const children = useSpacing(props.addSpacing, props.children);
  return <div className={props.className}>{children}</div>;
}
export function TextPrimitive(props) {
  return <div className={props.className}>{props.text}</div>;
}
export function IconPrimitive(props) {
  const { src, useMask } = props;
  const maskStyles = useMask
    ? {
        mask: `url(${src}) no-repeat 50% 50% / contain`,
        WebkitMask: `url(${src}) no-repeat 50% 50% / contain`,
      }
    : {
        background: `url(${src}) no-repeat 50% 50% / contain`,
      };
  return <div className={props.className} style={maskStyles} />;
}
export function ImagePrimitive(props) {
  return (
    <div
      role="img"
      className={props.className}
      style={{
        backgroundImage: `url(${props.src}`,
      }}
      aria-label={exists(props.alt) ? props.alt : ""}
    />
  );
}
export function SpacerPrimitive(props) {
  return <div className={props.className} />;
}
export function ProgressFillPrimitive(props) {
  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }

  return (
    <div
      className={props.className}
      style={{
        width: `${clamp(props.value, 0, 1) * 100}%`,
      }}
    />
  );
}
