// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, {
  createContext,
  useState,
  useCallback,
  useMemo,
  useContext,
  useLayoutEffect,
} from "react";
import { exists } from "./_internal_utils";
const DescendantsContext = createContext(null);
export function DescendantsProvider({ children, descendants, setDescendants }) {
  const register = useCallback((data) => {
    const { element } = data;

    if (!exists(element)) {
      return;
    }

    setDescendants((items) => {
      if (items.length === 0) {
        return [{ ...data, index: 0 }];
      }

      if (exists(items.find((item) => item.element === element))) {
        return items;
      }

      const index = items.findIndex((item) => {
        if (!exists(item.element) || !exists(element)) {
          return false;
        }

        return Boolean(
          item.element.compareDocumentPosition(element) &
            Node.DOCUMENT_POSITION_PRECEDING
        );
      });
      let newItems = [];

      if (index === -1) {
        newItems = [...items, { ...data, index }];
      } else {
        newItems = [
          ...items.slice(0, index),
          { ...data, index },
          ...items.slice(index),
        ];
      }

      return newItems.map((item, index) => ({ ...item, index }));
    });
  }, []);
  const unregister = useCallback((element) => {
    if (!exists(element)) {
      return;
    }

    setDescendants((items) => items.filter((item) => item.element !== element));
  }, []);
  const getIndex = useCallback(
    (element) => {
      return descendants.findIndex((item) => item.element === element);
    },
    [descendants]
  );
  const value = useMemo(
    () => ({
      descendants,
      register,
      unregister,
      getIndex,
    }),
    [descendants, register, unregister, getIndex]
  );
  return (
    <DescendantsContext.Provider value={value}>
      {children}
    </DescendantsContext.Provider>
  );
}
export function useDescendant(data) {
  const { element, value, disabled } = data;
  const { register, unregister, getIndex } = useContext(DescendantsContext);
  const [, forceUpdate] = useState();
  useLayoutEffect(() => {
    if (!exists(element)) {
      forceUpdate({});
    }

    register({
      element,
      value,
      disabled,
    });
    return () => unregister(element);
  }, [element, value, disabled]);
  return getIndex(element);
}
